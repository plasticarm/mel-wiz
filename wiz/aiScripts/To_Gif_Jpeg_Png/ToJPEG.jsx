/********************************************************** ADOBE SYSTEMS INCORPORATED Copyright 2005 Adobe Systems Incorporated All Rights Reserved NOTICE:  Adobe permits you to use, modify, and distribute this file in accordance with the termsof the Adobe license agreement accompanying it.  If you have received this file from a source other than Adobe, then your use, modification,or distribution of it requires the prior written permission of Adobe. *********************************************************/ /**********************************************************ExportDocsAsJPEG.jsx DESCRIPTION This sample gets files specified by the user from the selected folder and batch processes them and saves them as PDFs in the user desired destination with the same file name.**********************************************************/ // Main Code [Execution of script begins here] // uncomment to suppress Illustrator warning dialogs// app.userInteractionLevel = UserInteractionLevel.DONTDISPLAYALERTS; var destFolder, sourceFolder, files, fileType, sourceDoc, targetFile, JPEGExportOpts; // Select the source folder.sourceFolder = Folder.selectDialog( 'Select the folder with Illustrator files you want to convert to JPEG', '~' ); // If a valid folder is selectedif ( sourceFolder != null ){    files = new Array();    fileType = prompt( 'Select type of Illustrator files to you want to process. Eg: *.ai', ' ' );        // Get all files matching the pattern    files = sourceFolder.getFiles( fileType );        if ( files.length > 0 )    {        // Get the destination to save the files        destFolder = Folder.selectDialog( 'Select the folder where you want to save the converted JPEG files.', '~' );        for ( i = 0; i < files.length; i++ )        {            sourceDoc = app.open(files[i]); // returns the document object                                                // Call function getNewName to get the name and file to save the pdf            targetFile = getNewName();                        // Call function getJPEGOptions get the JPEGExportOptions for the files            JPEGExportOpts = getJPEGOptions();                        // Export as JPEG            sourceDoc.exportFile( targetFile, ExportType.JPEG, JPEGExportOpts );                        sourceDoc.close(SaveOptions.DONOTSAVECHANGES);        }        alert( 'Files are saved as JPEG in ' + destFolder );    }    else    {        alert( 'No matching files found' );    }}   /********************************************************* getNewName: Function to get the new file name. The primaryname is the same as the source file. **********************************************************/ function getNewName(){    var ext, docName, newName, saveInFile, docName;    docName = sourceDoc.name;    ext = '.JPEG'; // new extension for JPEG file    newName = "";            for ( var i = 0 ; docName[i] != "." ; i++ )    {        newName += docName[i];    }    newName += ext; // full JPEG name of the file        // Create a file object to save the JPEG    saveInFile = new File( destFolder + '/' + newName );     return saveInFile;}   /********************************************************* getJPEGOptions: Function to set the JPEG saving options of the files using the PDFSaveOptions object. **********************************************************/ function getJPEGOptions(){        // Create the PDFSaveOptions object to set the PDF options    var JPEGExportOpts = new ExportOptionsJPEG();                // Setting JPEGExportOptions properties. Please see the JavaScript Reference    // for a description of these properties.    // Add more properties here if you like    // JPEGExportOpts.antiAliasing = true;    JPEGExportOpts.artBoardClipping = false;    JPEGExportOpts.QualitySetting = 70;	    //JPEGExportOpts.horizontalScale = 100.0;    //JPEGExportOpts.matte = true;    //JPEGExportOpts.matteColor = 0, 0, 0;    JPEGExportOpts.saveAsHTML = false;    JPEGExportOpts.transparency = true;    //JPEGExportOpts.verticalScale = 100.0;     return JPEGExportOpts;} 