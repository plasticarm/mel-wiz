global proc curveWiz()
{
	
}

//CONNECT ALL ATTRIBUTES LAYOUT
//----------------------------------------------
global proc wizRepeatOffsetCurveLayout(string $parent)
{
	string $deformerWizLayout = `frameLayout
		-l "Repeat Offset Curve"	
		-ann ""
		-bv true
		-la "center"
		-li 10
		-lv true
		-mw 10
		-mh 10		
		-cll true
		-cl true
		-p $parent
		`;
		
		wizFloatSliderGrp(
			"-l Offset Distance "
			+"-v 1.0 "
			+"-n wizRepeatOffsetCurve_distance_floatSliderGrp"
			);
			
		wizIntSliderGrp(
			"-l Count "
			+"-v 10 "
			+"-n wizRepeatOffsetCurve_count_intSliderGrp"
			);	
			
		button
			-l "Offset Curves"
			-c ("wizRepeatOffsetCurve(\"-wiz\");")
			;
			
}

global proc wizMagneticFieldCurvesLayout(string $parent)
{
	string $layout = `frameLayout
		-l "Magnetic Field Curves"	
		-ann ""
		-bv true
		-la "center"
		-li 10
		-lv true
		-mw 10
		-mh 10		
		-cll true
		-cl true
		-p $parent
		`;
		
	string $tfbg = wizTextFieldButtonGrp(
		"-l Data File "
		+"-bl Browse "
		+"-ann Some Helpful Annotation "
		+"-bc af "
		+"-n wizMagneticFieldCurves_dataFile_textFieldButtonGrp");
		
	string $lcount = wizIntFieldGrp(
	"-l Line Count "
	+"-nf 1 "
	+"-v 1000 "	
	+"-n wizMagneticFieldCurves_lineCount_intFieldGrp");
	
	string $startFrameNum = wizIntFieldGrp(
	"-l Start Frame "
	+"-nf 1 "
	+"-v 1 "	
	+"-n wizMagneticFieldCurves_startFrame_intFieldGrp");
		
	string $endFrameNum = wizIntFieldGrp(
	"-l End Frame "
	+"-nf 1 "
	+"-v 1 "	
	+"-n wizMagneticFieldCurves_endFrame_intFieldGrp");
		
	
	button
		-l "Build Curves"
		-c ("wizBuildMagneticFieldLines(\"-wiz\");")
		;
	
	button
		-l "Build Thin Lines On Selected Frame Groups"
		-c ("buildThinLinesOnMagFieldDataCurves();")
		;	
}


//MENUS
//=====================================================================================================
//MIRROR CURVES MENU
//-----------------------------------------------
global proc mirrorCurvesMenu()
{
	menu -l "Mirror Curves";
		mirrorCurvesMenuItems();
}

//MIRROR CURVES MENU ITEMS
//-----------------------------------------------
global proc mirrorCurvesMenuItems()
{
	menuItem -l "Mirror Attach And Close Selected Curves" -c ("mirrorAttachAndCloseSelectedCurves(`ls -sl`);");
		
}

//REBUILD CURVES MENU ITEMS
//-----------------------------------------------
global proc rebuildCurvesMenuItems()
{
/*
	string $bcvC = (
	"float $bcvBendLength = `floatSliderGrp -q -v bendCurveCVsBendLength_floatSliderGrp`;"+"\n"
	+"int $bcvDegree = `intSliderGrp -q -v bendCurveCVsDegree_intSliderGrp`;"+"\n"
	+"bendCurveCVs(\"-ba \"" + $bcvBendLength + "\" -d \"" + $bcvDegree + "\");");
	
	menuItem -l "Bend Curve CVs" -c ($bcvC);
		menuItem -ob true -c ("openCurrentOptionsLayout(\"bendCurveCVsOptions\");");
		*/
	menuItem -l "Straighten And Bend Sharp Angles" -c ("straightenAndBendSharpCurveAngles(`ls -sl`);");
	menuItem -l "Curve Angles" -c ("bendCurveCVs(\"\");");
		menuItem -ob true -c ("openCurrentOptionsLayout(\"bendCurveCVsOptions\");");	
		
	menuItem -l "Convert Linear Curve To Cubic" -c ("convertLinearCurveToCubicCurve(`ls -sl`);");
	menuItem -l "Move Curve Pivot To Start CV" -c ("moveCurvePivotToStartCV();");	
}

//BEVEL CURVES MENU ITEMS
//-----------------------------------------------
global proc bevelCurvesMenuItems()
{
	string $bevelPlusPresetCommand = ("string $name = `textFieldGrp -q -tx bevelCurvePlusPresetNameTextFieldGrp`;"
	+"bevelPlusCurvesAndApplyPreset(`ls -sl`,$name);");
	
	menuItem -l "Bevel Plus Curve And Apply Preset" -c $bevelPlusPresetCommand;
		menuItem -ob true -c ("openCurrentOptionsLayout(\"bevelCurvePlusPresetOptions\");");
		
}

//INTERSECT CURVES MENU
//-----------------------------------------------
global proc intersectCurvesMenu()
{
	menu -l "Intersect Curves";
		menuItem -l "Get Positions Of All Curve Intersections" -c ("getPositionsOfAllCurveIntersections(`ls -sl`);");
		
}

//MIRROR ATTACH AND CLOSE SELECTED CURVES
//===========================================================
global proc string[] mirrorAttachAndCloseSelectedCurves(string $sel[])
{
	string $mac[];
	for($i=0;$i<`size $sel`;$i++){
		string $newCurve = mirrorAttachAndCloseCurve($sel[$i]);
		$mac[`size $mac`] = $newCurve;
	}
	return $mac;
}

//MIRROR ATTACH AND CLOSE CURVE
//===========================================================
global proc string mirrorAttachAndCloseCurve(string $curve)
{
	string $dup[] = wizDuplicate({$curve});
	mirrorObject($dup[0]);
	reverseCurve -rpo 1 $dup[0];
	
	select -r $curve;
	select -add $dup[0];
	
	string $attachCurve[] = `attachCurve -rpo 0 -kmk 1 -m 0 -bb 0.5 -bki 0 -p 0.1 $curve $dup[0]`;
	
	closeCurve -ps 2 -rpo 1 -bb 0.5 -bki 0 -p 0.1 $attachCurve[0];
	
	return $attachCurve[0];
}

//CURVE INTERSECTIONS
//====================================================================================================
//GET POSITION OF ALL CURVE INTERSECTIONS
//===============================================================
global proc float[] getPositionsOfAllCurveIntersections(string $c[])
{
	float $allPos[];
	for($i=0;$i<`size $c`;$i++){
		for($p=0;$p<`size $c`;$p++){
			float $pos[] = getPositionsOfCurveIntersections($c[$i], $c[$p]);
			appendFloatArray($allPos, $pos, `size $pos`);
		}
	}
	return $allPos;
	
}

//GET POSITION OF CURVE INTERSECTION
//===============================================================
global proc float[] getPositionsOfCurveIntersections(string $c1, string $c2)
{
	global string $nodes[];
	string $allCurves[] = { $c1, $c2 };
	int $size = `size $allCurves`;
	string $intString[] = findAllIntersections($allCurves, $size, 0, 0, 0, 0, 0, 1, 0, $nodes);
	float $int[] = stringArrayToFloatArray($intString);
	string $curve;
	float $pos[];
	for($i=0;$i<`size $int`;$i++){
		if(evenOrOdd($i) == 1){
			$curve = $c1;	
		} else {
			$curve = $c2;
		}	
		float $poc[] = `pointOnCurve -pr $int[$i] $curve`;
		appendFloatArray($pos, $poc, `size $poc`);
		spaceLocator -n ($curve + "Intersection") -p $poc[0] $poc[1] $poc[2];
		
	}
	return $pos;
}

//CONVERT LINEAR CURVE TO CUBIC CURVE
//=============================================================
global proc convertLinearCurveToCubicCurve(string $sel[])
{
	select -r $sel;
	//rebuildCurve -rpo 1 -rt 0 -end 1 -kr 2 -kcp 0 -kep 0 -kt 1 -s 100 -d 3 -tol 0.01 ;
	rebuildCurve -rpo 1 -rt 0 -end 1 -kr 0 -kcp 1 -kep 0 -kt 1 -s 100 -d 3 -tol 0.01;
	select -r $sel;
	closeCurve -rpo 1 -bb 0.5 -bki 0 -p 0.1;
	select -r $sel;
	closeCurve -rpo 1 -bb 0.5 -bki 0 -p 0.1;
}

//BEVEL PLUS CURVES AND APPLY PRESET
//=============================================================
global proc bevelPlusCurvesAndApplyPreset(string $sel[], string $preset)
{
	for($i=0;$i<`size $sel`;$i++){
		bevelPlusCurveAndApplyPreset($sel[$i], $preset);
	}
}

//BEVEL PLUS CURVE AND APPLY PRESET
//--------------------------------------------------------------
global proc bevelPlusCurveAndApplyPreset(string $sel, string $preset)
{
	float $blend = `floatFieldGrp -q -v1 bevelCurvePlusPresetBlendFloatFieldGrp`;
	string $bevel[] = `bevelPlus $sel`;
	applyAttrPreset $bevel[0] $preset $blend;
	
}

//@ STRAIGHTEN AND BEND CURVES
//====================================================================
/*****************************************************************//**
	Straights and bends sharp angles of curves.
	<hr>
	<b>Synopsis</b><br>
	procName [-fa string] [-fb linear] <br>
	A more detailed description.
	
	<b>Return value</b><br>
	string[] description of return.
	
	<b>Flags</b><br>
	-fa, -fb
	
	<hr>
	<b>Related</b><br>
	someProcedure(),
	
	<b>Examples</b><br>
	<code>
	straightenAndBendCurves(`ls -sl`);
	
	</code>
*********************************************************************/
global proc straightenAndBendSharpCurveAngles( string $sel[] )
{
	for ($i=0;$i<`size $sel`;$i++){
		select -r $sel[$i];		
		rebuildCurve -rpo 1 -rt 0 -end 0 -kr 1 -kcp 1 -kep 0 -kt 0 -d 1 -tol 0.0001;
		removeAngleOfCurveUnderMin("");
		smoothCurveCorners("");
	
	}

}

//@ SMOOTH CURVE CORNERS
//====================================================================
/*****************************************************************//**
	This will take a curve (hopefully linear) and make the cvs have a
	smooth bend as defined by -bendLength.
	<hr>
	<b>Synopsis</b><br>
	procName [-tag1 string] [-tag2 linear] <br>
	This will select all the cvs and insert knots at curve points at a
	distance defined by -bendLength. Then it will rebuild the curve as
	a cubic curve so that the corners now have a nice smooth bend.
	The bend length should be a value between 0.001 and 0.5;
	
	<b>Return value</b><br>
	string[] description of return.
	
	<b>Flags</b><br>
	-tag1, -tag2
	
	<hr>
	<b>Examples</b><br>
	<code>
	bendCurveCVs("-bl 0.1 -d 3");
	
	</code>
*********************************************************************/
global proc smoothCurveCorners( string $flags )
{
	wizLog("[@] smoothCurveCorners");
	float $bendLength;
	float $degree = 3;
	int $insertBetween = 0;
	
	float $minAngle;
	if (`size $flags` == 0){
		$bendLength = `floatSliderGrp -q -v bendCurveCVsBendLength_floatSliderGrp`;
		$degree = `intSliderGrp -q -v bendCurveCVsDegree_intSliderGrp`;
		$insertBetween = `checkBox -q -v bendCurveCVsInsertBetween_checkBox`;
	}
	
	int $numKnots = `intSliderGrp -q -v bendCurveNumberOfKnots_intSliderGrp`;
	
	string $sel[];	
	string $tok[] = tokenizeString($flags, " ");
	string $curve = $tok[`size $tok` - 1];
	if (`objExists $curve` == 1){
		select -r $curve;
	} else {
		$sel = `ls -sl`;
		$curve = $sel[0];
	}
	for ($i=0;$i<`size $tok`;$i++){
		switch ($tok[$i]){
			case "-bl" : case "-bendLength" :
			$bendLength = float($tok[($i + 1)]);
			break;
			
			case "-d" : case "-degree" :
			$degree = int($tok[($i + 1)]);
			break;
			
			case "-ib" : case "-insertBetween" :
			$insertBetween = 1;		
			break;
			
			case "-ma" : case "-minAngle" :
			$minAngle = float($tok[($i + 1)]);
			break;
			
			case "-nk" : case "-numberOfKnots" :
			$numKnots = int($tok[($i + 1)]);
			break;
		}
	}

	if (`attributeExists "spans" $curve` == 0){
		string $findCurve[] = smartSelectObjectsOfType(`ls -sl`, "-type nurbsCurve");;
		if (`size $findCurve` > 0){			
			$curve = $findCurve[0];
			wizlog ("-w 	[!] Found Curve : " + $curve + " [!]");
		} else {
			wizlog ("-w 	[!] Object : " + $curve + " : Is Not A Curve [!]");
			return ;
		}
		
	}
	float $spans = `getAttr ($curve + ".spans")`;
	// curve1.u[0] would be the curve point of cv 0
	// curve1.u[11] would be the curve point of cv 11 which would be the end of a curve with 12 cvs
	
	wizLog("	[-] Curve : " + $curve + " Degree : " + $degree + " Spans : " + $spans + " [-]");
	float $u1; // this is the curve point before the cv
	float $u2 = $bendLength; // this is the curve point after the cv
	string $pSelString;
	//select ($curve + ".u[" + $u2 + "]");
	//$pSelString = $pSelString + ($curve + ".u[" + $u2 + "] ");
	$pSelString = $pSelString + ($curve + ".u[" + $u2 + "] ");
	wizLog("	[#] BendLength : " + $bendLength + " Degree : " + $degree);
	wizLog("select -add " + $curve + ".u[" + $u2 + "];");
	for ($i=1;$i<$spans;$i++){
		$u1 = (float($i)) - $bendLength;
		$u2 = (float($i)) + $bendLength;
		$pSelString = $pSelString + ($curve + ".u[" + $u1 + "] ");
		$pSelString = $pSelString + ($curve + ".u[" + $u2 + "] ");
		
		//select -add ($curve + ".u[" + $u1 + "]");		
		//select -add ($curve + ".u[" + $u2 + "]");
		
		wizLog("select -add " + $curve + ".u[" + $u1 + "];");
		wizLog("select -add " + $curve + ".u[" + $u2 + "];");
	}
	$u1 = $spans - $bendLength;
	//select -add ($curve + ".u[" + $u1 + "]");
	wizLog("select -add " + $curve + ".u[" + $u1 + "];");
	$pSelString = $pSelString + ($curve + ".u[" + $u1 + "] ");
	
	
	wizLog ("	[*] select -r " + $pSelString);
	//select -r $pSelString;
	// insert knots at the selected curve points
	//string $p[] = `ls -sl`;
	//insertKnotCurve -ch 1 -cos on -nk 1 -add 0 -ib 0 -rpo 1 $pSelString;
	if (confirmStep("Insert Knots?") == 0){ return; }
	
	/*
	string $ikcCom = ("insertKnotCurve -ch 1 -cos on -nk 1 -add 0 -ib " + $insertBetween + " -rpo 1 " + $pSelString + ";");
	*/
	string $ikcCom = ("insertKnotCurve -nk " + $numKnots + " -add 0 -ib " + $insertBetween + " -rpo 1 " + $pSelString + ";");
	//wizLog($ikcCom);
	eval($ikcCom);
	
	//rebuildCurve -ch 1 -rpo 1 -rt 0 -end 1 -kr 0 -kcp 0 -kep 1 -kt 0 -s 12 -d 3 -tol 0.000328084 $curve;

	// rebuild the curve
	select -r $curve;
	rebuildCurve -rpo 1 -rt 0 -end 1 -kr 1 -kcp 1 -kep 1 -kt 0 -d $degree -tol 0.0001 $curve;
	//rebuildCurve -rpo 1 -rt 0 -end 1 -kr 1 -kcp 0 -kep 1 -kt 0 -d $degree -tol 0.0001 $curve;
	
}

/*

make a function to delete cv's if the angle between cvs is less than min angle.
use this on every 3 cvs
string $sel[] = `ls -fl -sl`;
float $t1[] = `xform -q -ws -t $sel[0]`;
float $t2[] = `xform -q -ws -t $sel[1]`;
float $t3[] = `xform -q -ws -t $sel[2]`;
float $angle = getAngleFromThreePoints($t1, $t2, $t3);
	

*/
//@ REMOVE ANGLE OF CURVE UNDER MIN
//====================================================================
/*****************************************************************//**
	Brief description.
	<hr>
	<b>Synopsis</b><br>
	procName [-fa string] [-fb linear] <br>
	A more detailed description.
	
	<b>Return value</b><br>
	string[] description of return.
	
	<b>Flags</b><br>
	-fa, -fb
	
	<hr>
	<b>Related</b><br>
	someProcedure(),
	
	<b>Examples</b><br>
	<code>
	removeAngleOfCurveUnderMin("-it 1 -ma 60");
	
	</code>
*********************************************************************/
global proc removeAngleOfCurveUnderMin( string $flags )
{
	
	int $it = 1;
	float $minAngle = 30.0;
	if ($flags == ""){
		$it = `intSliderGrp -q -v removeAngleLessThanIterations_intSliderGrp`;
		$minAngle = `floatSliderGrp -q -v removeAngleLessThanMinMinAngle_floatSliderGrp`;
		
	}
	string $tok[] = tokenizeString($flags, " ");
	for ($i=0;$i<`size $tok`;$i++){
		switch ($tok[$i]){
			case "-it" : case "-iterations" :
			$it = int($tok[($i + 1)]);
			break;
			
			case "-ma" : case "-minAngle" :
			$minAngle = float($tok[($i + 1)]);
			break;
		}
	}
	
	string $sel[] = `ls -sl`;
	string $curve = $sel[0];
	if (`nodeType $curve` == "transform"){
		string $s[] = `listRelatives -s $curve`;
		$curve = $s[0];
	}
	if (`attributeExists "spans" $curve` == 0){
		wizlog ("-w		[!] Curve : " + $curve + " Is Not A Curve [!]");
		return ;
	}
	int $spans = `getAttr ($curve + ".spans")`;
	for ($i=0;$i<$it;$i++){
		int $spans = `getAttr ($curve + ".spans")`;	
		string $delete[];
		for ($p=0;$p<$spans;$p=$p+2){
			if (($p + 1) == $spans){ break;}
			float $t1[] = `xform -q -ws -t ($curve + ".cv[" + $p + "]")`;
			float $t2[] = `xform -q -ws -t ($curve + ".cv[" + ($p + 1) + "]")`;
			float $t3[] = `xform -q -ws -t ($curve + ".cv[" + ($p + 2) + "]")`;
			float $angle = getAngleFromThreePoints($t1, $t2, $t3);
			if ($angle < $minAngle){
				$delete[`size $delete`] = ($curve + ".cv[" + ($p + 1) + "]");
			}

		}
		if (`size $delete` > 0){
			delete $delete;
		}
		// i guess you have to rebuild
		rebuildCurve -rpo 1 -rt 0 -end 0 -kr 1 -kcp 1 -kep 0 -kt 0 -d 1 -tol 0.0001;
	}
}

//@ MOVE CURVE PIVOT TO START C V
//====================================================================
/*****************************************************************//**
	Brief description.
	<hr>
	<b>Synopsis</b><br>
	procName [-fa string] [-fb linear] <br>
	A more detailed description.
	
	<b>Return value</b><br>
	string[] description of return.
	
	<b>Flags</b><br>
	-fa, -fb
	
	<hr>
	<b>Related</b><br>
	someProcedure(),
	
	<b>Examples</b><br>
	<code>
	string $arr[] = procName("-fa aString -fb anotherString");
	
	</code>
*********************************************************************/
global proc moveCurvePivotToStartCV()
{
	string $sel[] = `ls -sl`;
	for ($i=0;$i<`size $sel`;$i++){		
	
		string $curve = $sel[$i];
		select -r $curve;
		
		string $startCV = ($curve + ".cv[0]");
		string $sl[] = `spaceLocator`;
		float $pos[] = `xform -q -ws -t $startCV`;		
		xform -ws -t $pos[0] $pos[1] $pos[2] $sl[0];	
		float $rp[] = `xform -q -ws -ro $sl[0]`;
		string $tanCon[] = `tangentConstraint -weight 1 -aimVector 0 1 0 -upVector 0 1 0 -worldUpType "vector" -worldUpVector 0 1 0 $curve $sl[0]`;
		xform -ws -piv $pos[0] $pos[1] $pos[2] $curve;
		
		delete $tanCon;
		
		///////////////////////////////////////////////////////////////////////////////////////////////////////////
		//	damn rotate pivot shit doesn't work
		//////////////////////////////////////////////////////////////////////////////////////////////////////////
		/*
		
		float $rot[] = `xform -q -ws -ro $sl[0]`;
		xform -ws -ro $rot[0] $rot[1] $rot[2] $curve;
		makeIdentity -r $curve;
		xform -ws -ro (0 - $rot[0]) (0 - $rot[1]) (0 - $rot[2]) $curve;
		//xform -ws -rp $rp[0] $rp[1] $rp[2] $curve;
		*/
		
		//delete $sl;
		//select -r $sel;
	}
}


global proc wizRepeatOffsetCurve( string $flags )
{

	string $sel[];
	int $count = 10;
	float $distance = 1;
	string $tok[] = tokenizeString($flags, " ");
	for ($i=0;$i<`size $tok`;$i++){
		switch ($tok[$i]){
			
			case "-sl" : case "-selected" :
			$sel = `ls -tr -sl`;
			break ;			
			
			case "-oc" : case "-offsetCount" :
			$count = int ($tok[($i + 1)]);
			break ;
			
			case "-wiz" :
			$count = `intSliderGrp -q -v wizRepeatOffsetCurve_count_intSliderGrp`;
			$distance = `floatSliderGrp -q -v wizRepeatOffsetCurve_distance_floatSliderGrp`;
			break ;
			
		}
	}
	if (`size $sel` == 0){
		$sel = `ls -tr -sl`;
	}
	
	for ($i=0;$i<`size $sel`;$i++){
		for ($c=0;$c<$count;$c++){
			offsetCurve -ch on -rn false -cb 2 -st true -cl true -cr 0 -d ($distance * ($c + 1)) -tol 0.01 -sd 5 -ugn false $sel[$i] ;	
		}
		
	}
	


}

global proc wizBuildMagneticFieldLines( string $flags )
{
	string $filename;
	string $sel[];
	int $edit;
	int $lineCount;
	int $startFrame, $endFrame, $curFrame;
	$curFrame = $startFrame;
	string $tok[] = tokenizeString($flags, " ");
	for ($i=0;$i<`size $tok`;$i++){
		switch ($tok[$i]){
			case "-fn" : case "-filename" :
			$filename = $tok[($i + 1)];
			break ;

			case "-wiz" : 
			$filename = `textFieldButtonGrp -q -tx wizMagneticFieldCurves_dataFile_textFieldButtonGrp`;
			$lineCount = `intFieldGrp -q -v1 wizMagneticFieldCurves_lineCount_intFieldGrp`;
			$startFrame = `intFieldGrp -q -v1 wizMagneticFieldCurves_startFrame_intFieldGrp`;
			$endFrame = `intFieldGrp -q -v1 wizMagneticFieldCurves_endFrame_intFieldGrp`;
			break ;			
			
			case "-e" : case "-edit" :
			$edit = 1;
			break ;
			
		}
	}

	wizProgressWindowStart("Building Lines", "Reading Data", 1);
	
	//_________________________________________
	// Read Data
	/*
	string $data[] = getCSVDataByLine($filename);
	int $maxProgress = (`size $data`);
	wizProgressWindowMinMax(0,$maxProgress);
	*/	
	
	int $maxProgress = $endFrame - $startFrame;
	
	int $colCount;
	int $blankLineCount;
	int $lcc;
	int $lineCheckCount = 1000;
	int $frameLineCount;
	int $frameCount;
	
	string $splice[] = wizSpliceFilePath($filename, "-dir -fn -ex");
	//$filename = $splice[0] + $splice[1] + $curFrame + $splice[3];
	
	
	
	
	string $fLines[];
	
	for ($i=$startFrame;$i<$endFrame;$i++){
		$filename = $splice[0] + $splice[1] + "." + $i;
		
		int $fileId = `fopen $filename "r"`;
	
		while ( !`feof $fileId` ){
					
			string $data = `fgetline $fileId`;	
		
			//wizlog ("[Field Data] ", $data);
	
			//_________________________________________
			// Check if this is the start of a line or start of a new frame
			string $lineString = substituteAllString($data, " ", "");
			//wizlog ("Line String : |" + $lineString + "|");
	
			if ((startsWith($lineString,"L")) == 1){
				$frameLineCount++;
				wizlog ("----------------------------------------------[END LINE " + $frameLineCount + "]----------------------------------------------");
				wizProgressWindowStep(1);
				continue;
			} 
			
			//_________________________________________
			// Get XYZ Coordinates
			float $x[], $y[], $z[];
			
			for ($l=0;$l<3;$l++){
				switch ($l){
					case 0 :
					string $dataTok[] = tokenizeString($data," ");
					$x = stringArrayToFloatArray($dataTok);
					break ;
					
					case 1 :
					$data = `fgetline $fileId`;
					string $dataTok[] = tokenizeString($data," ");
					$y = stringArrayToFloatArray($dataTok);
					break ;
					
					case 2 :
					$data = `fgetline $fileId`;
					string $dataTok[] = tokenizeString($data," ");
					$z = stringArrayToFloatArray($dataTok);
					break ;
				}
				wizProgressWindowStep(1);
			}
			
			//_________________________________________
			// Build Curve Command
			
			string $curveName = "MagFieldCurve" + $frameLineCount + "_" + $frameCount;
			string $curveCommand;
			$curveCommand = "curve -d 3 -n " + $curveName + " ";
			
			if (`size $x` < 2){
				wizlog ("[!] Cannot Make Curve From Less Than 2 Points [!]");
				continue;
			}
			for ($p=0;$p<`size $x`;$p++){
				if ($x[$p] == 0 && $y[$p] == 0 && $z[$p] == 0){
					continue ;
				}
				$curveCommand = $curveCommand + " -p " + $x[$p] + " " + $y[$p] + " " + $z[$p];
				
			}
				
			//_________________________________________
			// Evaluate Curve Command
			//wizlog ("[CURVE COMMAND] \n" + $curveCommand);
			eval($curveCommand);
			
			$fLines[`size $fLines`] = $curveName;
	
			//_________________________________________
			// Key Curve CVs
			/*
			SelectCurveCVsAll;
			string $cvs[] = `ls -sl`;
			setKeyframe -breakdown 0 -hierarchy none -controlPoints 0 -shape 0 $cvs;
			*/
			
			
			if ((wizProgressCancelled()) == 1){
				return ;
			}
			
			//wizProgressWindowStep(1);
			//wizProgressWindowUpdate(($i + " / " + `size $data`), 1);
			
		
			$lineCount++;
			
			refresh;
			refreshAE;
			
			
		}
		
		fclose $fileId;

		
		wizlog ("----------------------------------------------[LINE COUNT] " + $frameLineCount + "----------------------------------------------");			
		wizlog ("----------------------------------------------[END FRAME " + $frameCount + "]----------------------------------------------");
		$frameLineCount = 0;
		$frameCount++;
		
		select -r $fLines;
		string $group = `group -n ("MagFieldCurvesFrame" + $frameCount)`;
		
		//_________________________________________
		// Key visibility
		setKeyframe -v 0 -at visibility -t 0.0 $group;
		setKeyframe -v 1 -at visibility -t $frameCount $group;
		setKeyframe -v 0 -at visibility -t ($frameCount + 1) $group;
		
		clear $fLines;
		
		refresh;
		refreshAE;
			
			
		wizProgressWindowStep(1);
		

	}
	
	
	
	wizProgressWindowEnd();

}

global proc buildThinLinesOnMagFieldDataCurves()
{
	string $sel[] = `ls -sl`;
	int $saveFrame;
	
	wizProgressWindowStart("Building Lines",("Frame 0 -of- " + (`size $sel`)), 1);
	wizProgressWindowMinMax(0, (`size $sel`));
	for ($i=0;$i<`size $sel`;$i++){
		string $ch[] = `listRelatives -c $sel[$i]`;
		
		select -r "ThinLineShader1:ThinLineShader";
		select -add $ch;
		string $thinLines = wizBuildThinLines("-sl");
		parent $thinLines $sel[$i];
		
		if ($saveFrame == 10){
			wizProgressWindowStatus("[Saving File]");
			file -save;
			wizlog ("[SAVING FILE]");
			
			$saveFrame = 0;
		} else {
			$saveFrame++;
			
		}
		wizProgressWindowStatus(("Frame " + $i + " -of- " + (`size $sel`)));
		wizProgressWindowStep(1);
		
		if (wizProgressCancelled() == 1) return;
		
		
	}
	wizProgressWindowEnd();

}

/*
	//_________________________________________
	// Read Data
	/*
	string $data[] = getCSVDataByLine($filename);
	int $maxProgress = (`size $data`);
	wizProgressWindowMinMax(0,$maxProgress);
	*/	
	/*
	$fileId = `fopen $file "r"`;

	int $lineCount = 0;
	int $colCount;
	int $blankLineCount;
	int $lcc;
	int $lineCheckCount = 1000;
	while ( !`feof $fileId` ){
		
		if ($lineCount == $lcc){
			wizlog ("...Reading Line " + $lineCount);
			$lcc = $lcc + $lineCheckCount;
		}		
		string $nextLine = `fgetline $fileId`;
		
		
		
		//wizlog (niceArrayList("[Field Data]", $data));
		
		for ($i=0;$i<`size $data`;$i++){
			string $lineString = substituteAllString($data[$i], " ", "");
			wizlog ("Line String : |" + $lineString + "|");
			//if ((startsWith($data[$i],"L")) == 1){
			if ((startsWith($lineString,"L")) == 1){
				wizlog ("----------------------------------------------[LINE]----------------------------------------------");
				continue;
			} else if ($lineString == "F"){
				wizlog ("----------------------------------------------[FRAME]----------------------------------------------");
				
				continue;
			}
			float $x[], $y[], $z[];
			
			for ($l=0;$l<3;$l++){
				string $dataTok[] = tokenizeString($data[($i + $l)]," ");
				switch ($l){
					case 0 :
					$x = stringArrayToFloatArray($dataTok);
					break ;
					
					case 1 :
					$y = stringArrayToFloatArray($dataTok);
					break ;
					
					case 2 :
					$z = stringArrayToFloatArray($dataTok);
					break ;
				}
				
			}
			
			string $curveCommand = "curve -d 3 ";
			if (`size $x` == 0){
				continue ;
			}
			for ($p=0;$p<`size $x`;$p++){
				if ($x[$p] == 0 && $y[$p] == 0 && $z[$p] == 0){
					continue ;
				}
				$curveCommand = $curveCommand + " -p " + $x[$p] + " " + $y[$p] + " " + $z[$p];
				
			}
			
			wizlog ("[CURVE COMMAND] \n" + $curveCommand);
		
			eval($curveCommand);
			$i = $i + 2;	
			
			if ((wizProgressCancelled()) == 1){
				return ;
			}
			
			//wizProgressWindowStep(1);
			wizProgressWindowUpdate(($i + " / " + `size $data`), 1);
			
		}	
		$lineCount++;
		
	}
	
	fclose $fileId;
	*/